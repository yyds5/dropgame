{"version":3,"sources":["components/interface/interface.js","App.js","reportWebVitals.js","index.js"],"names":["Interface","randomInt","min","max","Math","ceil","floor","random","useEffect","engine","matter","create","render","element","document","body","ground","rectangle","window","innerHeight","isStatic","mouse","canvas","mouseConstraint","constraint","visible","on","x","absolute","y","add","world","width","innerWidth","height","style","run","initGame","Button","fullWidth","onClick","location","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"8NA+DeA,EA5DG,WAGd,IAAMC,EAAY,WAAmB,IAAlBC,EAAiB,uDAAX,EAAGC,EAAQ,uCAGhC,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,GAqCzDM,qBAAU,YAnCO,WACb,IAAIC,EAASC,SAAcC,SACvBC,EAASF,SAAcC,OAAO,CAC9BE,QAASC,SAASC,KAClBN,WAGAO,EAASN,SAAcO,UAAUhB,EAAU,IAAK,KAAMiB,OAAOC,YAAc,IAAKlB,EAAU,IAAK,KAAMA,EAAU,IAAK,KAAM,CAAEmB,UAAU,IAMtIC,EAAQX,QAAaC,OAAOC,EAAOU,QAEnCC,EAAkBb,kBAAuBC,OAAOF,EAAQ,CACxDY,QACAG,WAAY,CACRZ,OAAQ,CAAEa,SAAS,MAG3Bf,SAAcgB,GAAGH,EAAiB,WAAW,WACzC,IAAII,EAAIN,EAAMO,SAASD,EACnBE,EAAIR,EAAMO,SAASC,EACvBnB,QAAaoB,IAAIrB,EAAOsB,MAAOrB,SAAcO,UAAUU,EAAGE,EAAG,GAAI,QAErEjB,EAAOS,MAAQA,EAEfT,EAAOU,OAAOU,MAAQd,OAAOe,WAAa,IAC1CrB,EAAOU,OAAOY,OAAShB,OAAOC,YAAc,IAC5CP,EAAOU,OAAOa,MAAQ,iCACtBzB,QAAaoB,IAAIrB,EAAOsB,MAAxB,UAvBc,GAuBd,CAA4Cf,EAAQO,KACpDb,SAAc0B,IAAI3B,GAClBC,SAAc0B,IAAIxB,GAGlByB,KACD,IAKH,OAAO,8BAAK,cAACC,EAAA,EAAD,CACRC,WAAW,EACXC,QAAS,WALT1B,SAAS2B,SAASC,UAGV,wBC1CDC,MATf,WACE,OACE,qBAAKR,MAAO,GAAZ,SAEE,cAAC,EAAD,OCMSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASzC,OACP,cAAC,IAAM0C,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASyC,eAAe,SAM1BX,M","file":"static/js/main.c4b2f021.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { Button } from '@material-ui/core';\nimport * as matter from 'matter-js'\nconst Interface = () => {\n\n    // const [resetToggle, setResetToggle] = useState(true);\n    const randomInt = (min = 1, max) => {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    const initGame = () => {\n        let engine = matter.Engine.create();\n        let render = matter.Render.create({\n            element: document.body,\n            engine\n        })\n\n        let ground = matter.Bodies.rectangle(randomInt(200, 550), window.innerHeight / 1.5, randomInt(100, 850), randomInt(100, 350), { isStatic: true });\n        let boxList = [];\n        // let x = 0;\n        // let y = 0\n        // let regularBox = matter.Bodies.rectangle(x ? x : 0, y ? y : 0, 80, 80);\n\n        let mouse = matter.Mouse.create(render.canvas);\n\n        let mouseConstraint = matter.MouseConstraint.create(engine, {\n            mouse,\n            constraint: {\n                render: { visible: false }\n            },\n        });\n        matter.Events.on(mouseConstraint, 'mouseup', () => {\n            let x = mouse.absolute.x;\n            let y = mouse.absolute.y;\n            matter.World.add(engine.world, matter.Bodies.rectangle(x, y, 80, 80));\n        })\n        render.mouse = mouse;\n\n        render.canvas.width = window.innerWidth / 1.5;\n        render.canvas.height = window.innerHeight / 1.5;\n        render.canvas.style = \"width: 100%;text-align:center;\"\n        matter.World.add(engine.world, [...boxList, ground, mouseConstraint]);\n        matter.Engine.run(engine);\n        matter.Render.run(render);\n    }\n    useEffect(() => {\n        initGame()\n    }, [])\n    const resetGame = () => {\n        document.location.reload()\n    }\n\n    return <div><Button\n        fullWidth={true}\n        onClick={() => {\n            resetGame()\n        }}>\n        Restart\n    </Button></div >\n}\n\n\nexport default Interface","import './App.css';\nimport Interface from './components/interface/interface'\nfunction App() {\n  return (\n    <div style={{\n    }}>\n      <Interface />\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}