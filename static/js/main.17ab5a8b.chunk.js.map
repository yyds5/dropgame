{"version":3,"sources":["components/interface/interface.js","App.js","reportWebVitals.js","index.js"],"names":["Interface","useState","buttonMsg","setButtonMsg","randomInt","min","max","Math","ceil","floor","random","useEffect","engine","matter","create","render","element","document","body","groundx","groundy","window","innerHeight","ground","rectangle","isStatic","mouse","canvas","mouseConstraint","constraint","visible","on","x","absolute","y","newShape","chamfer","radius","bodyArr","world","bodies","isInsideObj","forEach","val","i","position","abs","add","setInterval","setTimeout","resetGame","width","innerWidth","height","style","run","initGame","location","reload","Button","fullWidth","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"sOAuGeA,EApGG,WAAO,IAAD,EACcC,mBAAS,WADvB,mBACbC,EADa,KACFC,EADE,KAIdC,EAAY,WAAmB,IAAlBC,EAAiB,uDAAX,EAAGC,EAAQ,uCAGhC,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,GA2EzDM,qBAAU,YAxEO,WAEb,IAAIC,EAASC,SAAcC,SACvBC,EAASF,SAAcC,OAAO,CAC9BE,QAASC,SAASC,KAClBN,WAIAO,EAAUf,EAAU,IAAK,KACzBgB,EAAUC,OAAOC,YAAc,IAC/BC,EAASV,SAAcW,UAAUL,EAASC,EAAShB,EAAU,IAAK,KAAMA,EAAU,IAAK,KAAM,CAAEqB,UAAU,IAKzGC,EAAQb,QAAaC,OAAOC,EAAOY,QACnCC,EAAkBf,kBAAuBC,OAAOF,EAAQ,CACxDc,QACAG,WAAY,CACRd,OAAQ,CAAEe,SAAS,MAK3BjB,SAAckB,GAAGH,EAAiB,WAAW,WAEzC,IAAII,EAAIN,EAAMO,SAASD,EACnBE,EAAIR,EAAMO,SAASC,EACnBC,EAAWtB,SAAcW,UAAUQ,EAAGE,EAAG9B,EAAU,EAAG,IAAKA,EAAU,EAAG,IAAK,CAAEgC,QAAS,CAAEC,OAAQjC,EAAU,EAAG,OAE/GkC,EAAU1B,EAAO2B,MAAMC,OACvBC,GAAc,EAClBH,EAAQI,SAAQ,SAACC,EAAKC,GAClB,GAAIA,EAAI,EAAG,CAAC,IACAC,EAAaF,EAAbE,UACJtC,KAAKuC,IAAID,EAASX,EAAIA,GAAK,GAAK3B,KAAKuC,IAAID,EAASb,EAAIA,GAAK,KAC3DS,GAAc,OAIrBA,GACD5B,QAAakC,IAAInC,EAAO2B,MAAOJ,GAInCa,aAAY,WACRV,EAAQI,SAAQ,SAACC,EAAKC,GACGD,EAAbE,SACKX,EAAId,IACbjB,EAAa,sFAEb8C,YAAW,WACPC,MACD,YAGZ,QAEPnC,EAAOW,MAAQA,EAGfX,EAAOY,OAAOwB,MAAQ9B,OAAO+B,WAAa,IAC1CrC,EAAOY,OAAO0B,OAAShC,OAAOC,YAAc,IAC5CP,EAAOY,OAAO2B,MAAQ,iCAGtBzC,QAAakC,IAAInC,EAAO2B,MAAxB,UAtDc,GAsDd,CAA4ChB,EAAQK,KACpDf,SAAc0C,IAAI3C,GAClBC,SAAc0C,IAAIxC,GAIlByC,KACD,IAEH,IAAMN,EAAY,WACdjC,SAASwC,SAASC,UAGtB,OAAO,8BAAK,cAACC,EAAA,EAAD,CACRC,WAAW,EACXC,QAAS,WACLX,KAHI,SAKPhD,OCvFM4D,MATf,WACE,OACE,qBAAKR,MAAO,GAAZ,SAEE,cAAC,EAAD,OCMSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASzD,OACP,cAAC,IAAM0D,WAAP,UACE,cAAC,EAAD,MAEFxD,SAASyD,eAAe,SAM1BX,M","file":"static/js/main.17ab5a8b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport * as matter from 'matter-js';\nconst Interface = () => {\n    const [buttonMsg, setButtonMsg] = useState('Restart');\n\n    //returns random integer in range\n    const randomInt = (min = 1, max) => {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n\n    const initGame = () => {\n        //initial\n        let engine = matter.Engine.create();\n        let render = matter.Render.create({\n            element: document.body,\n            engine\n        });\n\n        //set ground block size and position\n        let groundx = randomInt(200, 550);\n        let groundy = window.innerHeight / 1.5;\n        let ground = matter.Bodies.rectangle(groundx, groundy, randomInt(100, 850), randomInt(100, 350), { isStatic: true });\n\n        let boxList = [];\n\n        //set mouse constraint\n        let mouse = matter.Mouse.create(render.canvas);\n        let mouseConstraint = matter.MouseConstraint.create(engine, {\n            mouse,\n            constraint: {\n                render: { visible: false }\n            },\n        });\n\n        //set mouse click event\n        matter.Events.on(mouseConstraint, 'mouseup', () => {\n            //grab mouse absolute position\n            let x = mouse.absolute.x;\n            let y = mouse.absolute.y;\n            let newShape = matter.Bodies.rectangle(x, y, randomInt(2, 80), randomInt(2, 80), { chamfer: { radius: randomInt(5, 30) } });\n            //checks if mouse position is on top of another existing shape\n            let bodyArr = engine.world.bodies;\n            let isInsideObj = false;\n            bodyArr.forEach((val, i) => {\n                if (i > 0) {\n                    const { position } = val;\n                    if (Math.abs(position.y - y) < 5 || Math.abs(position.x - x) < 5) {\n                        isInsideObj = true;\n                    }\n                }\n            });\n            if (!isInsideObj) {\n                matter.World.add(engine.world, newShape);\n            }\n\n            //checks if any shapes are below ground\n            setInterval(function () {\n                bodyArr.forEach((val, i) => {\n                    const { position } = val;\n                    if (position.y > groundy) {\n                        setButtonMsg('ðŸ˜­Object fell below the groundðŸ˜­, Game restarting in 3 seconds');\n\n                        setTimeout(() => {\n                            resetGame();\n                        }, 2500);\n                    }\n                });\n            }, 1000);\n        });\n        render.mouse = mouse;\n\n        //sets canvas proper position\n        render.canvas.width = window.innerWidth / 1.5;\n        render.canvas.height = window.innerHeight / 1.5;\n        render.canvas.style = \"width: 100%;text-align:center;\";\n\n        //initials base ground block and game in general\n        matter.World.add(engine.world, [...boxList, ground, mouseConstraint]);\n        matter.Engine.run(engine);\n        matter.Render.run(render);\n    };\n\n    useEffect(() => {\n        initGame();\n    }, []);\n\n    const resetGame = () => {\n        document.location.reload();\n    };\n\n    return <div><Button\n        fullWidth={true}\n        onClick={() => {\n            resetGame();\n        }}>\n        {buttonMsg}\n    </Button></div >;\n};\n\n\nexport default Interface;","import './App.css';\nimport Interface from './components/interface/interface'\nfunction App() {\n  return (\n    <div style={{\n    }}>\n      <Interface />\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}